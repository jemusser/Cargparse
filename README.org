
* ArgParse for C

Argparse provides a simple interface for quickly and cleanly generating command line argument parsers for applications.

** Usage
Arguments are added by the developer with a set of add_*_arg functions where * is the type expected by the flag.
Note if both the ~short_flag~ and ~long_flag~ are set to ~NULL~ for any of these functions, the argument is treated as a positional argument but will otherwise behave as expected.
Positional arguments are parsed only in relationship to eachother, and are order agnostic toward the flagged arguments.  
I.e. ~foo -f here there~ is equivolent to ~foo here -f there~ (as long as -f is a boolean flag) but different from ~foo -f there here~.


*** /int/ add_boolean_arg(/char*/ name, /char*/ short_flag, /char*/ long_flag, /char*/ description)
~name~ is used only within the context of the code for future lookup.
~short_flag~ is the expected flag as a single character preceeded by a single dash i.e. =-p=
~long_flag~ is the expected flag as two dashes followed by a string i.e. =--print=
Add an argument to the expected flags with a resulting type boolean.


*** /int/ add_integer_arg(/char*/ name, /char*/ short_flag, /char*/ long_flag, /int/ default, /int/ required, /char*/ description)
~name~ is used only within the context of the code for future lookup.
~short_flag~ is the expected flag as a single character preceeded by a single dash i.e. =-p=
~long_flag~ is the expected flag as two dashes followed by a string i.e. =--print=
~default~ will return a default value for the flag if it is not included.  If ~required~ is set, default is ignored.
~required~ is an integer value representing whether a flag is required to run the program (0 for not required, 1 for required).  WARNING: if a required flag is not included, the program will halt.
~description~ is the string descrition of the field, and will appear as part of the automatically generated ~--help~ output.
Add an argument to the expected flags with a resulting type integer.


*** /int/ add_string_arg(/char*/ name, /char*/ short_flag, /char*/ long_flag, /char*/ default, /int/ required, /char*/ description)
~name~ is used only within the context of the code for future lookup.
~short_flag~ is the expected flag as a single character preceeded by a single dash i.e. =-p=
~long_flag~ is the expected flag as two dashes followed by a string i.e. =--print=
~default~ will return a default value for the flag if it is not included.  If ~required~ is set, default is ignored.
~required~ is an integer value representing whether a flag is required to run the program (0 for not required, 1 for required).  WARNING: if a required flag is not included, the program will halt.
~description~ is the string descrition of the field, and will appear as part of the automatically generated ~--help~ output.
Add an argument to the expected flags with a resulting type string.


*** /void/ parse_args(/int/ nargs, /char*/ args)
~parse_args~ takes the ~nargs~ and ~args~ values passed to a ~main~ function as is.  These arguments are then parsed and placed into query-able objects.

*** /int/ get_boolean_arg(/char*/ name)
~name~ is the reference name given to an argument in the ~add_boolean_arg~ function.
When called after ~parse_args~ returns the value stored by the flag in the argument's provided as an int.

*** /int/ get_integer_arg(/char*/ name)
~name~ is the reference name given to an argument in the ~add_integer_arg~ function.
When called after ~parse_args~ returns the value stored by the flag in the argument's provided as an int.

*** /char*/ get_string_arg(/char*/ name)
~name~ is the reference name given to an argument in the ~add_string_arg~ function.
When called after ~parse_args~ returns the value stored by the flag in the argument's provided as a char*.

** Example

#+BEGIN_SRC C
// ./foo -u -x 100 -t lookup arg1 arg2
int main(int nargs, char** args) {
  add_string_arg("type", "t", "type", "other", 0, "The operation type.");
  add_boolean_arg("upload", "u", "upload", "Do an upload operation.");
  add_integer_arg("times", "x", "times", 1, 1, "Number of times to do the operation.");
  add_string_arg("src", NULL, NULL, "", 1, "Operation source.");
  add_string_arg("dst", NULL, NULL, "", 1, "Operation destination.");
  
  parse_args(nargs, args);
  
  printf("Type: %s\n", get_string_arg("type"));
  printf("Upload: %s\n", get_boolean_arg("upload"));
  printf("Times: %d\n", get_integer_arg("times"));
  printf("src: %s\n", get_string_arg("src"));
  printf("dst: %s\n", get_string_arg("dst"));
}
#+END_SRC
